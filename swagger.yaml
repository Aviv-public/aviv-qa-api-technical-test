openapi: 3.0.0
info:
  title: Book Management API
  description: A RESTful API for managing books with CRUD operations
  version: 1.0.0

servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /:
    get:
      summary: Get API information
      description: Returns welcome message and available endpoints
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Welcome to Book Management API
                  endpoints:
                    type: object
                    properties:
                      books:
                        type: string
                        example: /api/books
                      health:
                        type: string
                        example: /api/health

  /api/books:
    get:
      summary: Get all books
      responses:
        '200':
          description: List of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Create a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/books/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Book ID
    get:
      summary: Get a book by ID
      responses:
        '200':
          description: Book found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a book by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a book by ID
      responses:
        '200':
          description: Book deleted successfully
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Partially update a book
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                author:
                  type: string
                publishedDate:
                  type: string
              example:
                title: "The Great Gatsby"
                author: "F. Scott Fitzgerald"
                publishedDate: "1925-04-10T00:00:00.000Z"
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/health:
    get:
      summary: Check API health
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    format: date-time

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
  schemas:
    BookInput:
      type: object
      required:
        - title
        - author
        - publishedDate
      properties:
        title:
          type: string
          example: The Great Gatsby
        author:
          type: string
          example: F. Scott Fitzgerald
        publishedDate:
          type: string
          format: date
          example: 1925-04-10

    Book:
      allOf:
        - $ref: '#/components/schemas/BookInput'
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              example: 1

    Error:
      type: object
      properties:
        error:
          type: string
          example: Error message

security:
  - ApiKeyAuth: []